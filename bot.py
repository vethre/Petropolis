# main.py (refactored for latest python-telegram-bot v20+)

import os
from dotenv import load_dotenv
import random
import json
import logging
from datetime import datetime
import time
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ParseMode
from telegram.ext import (ApplicationBuilder, CommandHandler, CallbackQueryHandler,
                          ContextTypes, MessageHandler, ConversationHandler, filters)
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from keep_alive import keep_alive
import pymongo

# Configure logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

# –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç—Ä–µ–π–¥—ã –≤ –ø–∞–º—è—Ç–∏
active_trades = {}  # {user_id: {"partner": partner_id, "offer": pet_index, "status": "waiting"|"confirmed"}}
user_states = {}
load_dotenv()
TOKEN=os.getenv("TOKEN")
MONGO_URI=os.getenv("MONGO_URI")
client = pymongo.MongoClient(MONGO_URI)
db = client["petropolis"]
users_collection = db["users"]

# Constants
PET_TYPES = ["–û–≥–Ω–µ–Ω–Ω—ã–π", "–í–æ–¥–Ω—ã–π", "–ó–µ–º–ª—è–Ω–æ–π", "–í–æ–∑–¥—É—à–Ω—ã–π", "–°–≤–µ—Ç–ª—ã–π", "–¢—ë–º–Ω—ã–π"]
RARITIES = ["–û–±—ã—á–Ω—ã–π", "–ù–µ–æ–±—ã—á–Ω—ã–π", "–†–µ–¥–∫–æ—Å—Ç–Ω—ã–π", "–≠–ø–∏—á–µ—Å–∫–∏–π", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π"]
RARITY_CHANCES = {
    "–û–±—ã—á–Ω—ã–π": 0.35,
    "–ù–µ–æ–±—ã—á–Ω—ã–π": 0.30,
    "–†–µ–¥–∫–æ—Å—Ç–Ω—ã–π": 0.20,
    "–≠–ø–∏—á–µ—Å–∫–∏–π": 0.10,
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": 0.04,
    "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π": 0.01,
}
RARITY_MULTIPLIERS = {
    "–û–±—ã—á–Ω—ã–π": 50,
    "–ù–µ–æ–±—ã—á–Ω—ã–π": 100,
    "–†–µ–¥–∫–æ—Å—Ç–Ω—ã–π": 250,
    "–≠–ø–∏—á–µ—Å–∫–∏–π": 500,
    "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π": 1500,
    "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π": 3000,
}
EGG_PRICES = {
    "–ë–∞–∑–æ–≤–æ–µ": 150,
    "–ü—Ä–µ–º–∏—É–º": 600,
    "–†–µ–¥–∫–æ—Å—Ç–Ω–æ–µ": 1200,
}
EGG_RARITY_BOOSTS = {
    "–ë–∞–∑–æ–≤–æ–µ": 0,
    "–ü—Ä–µ–º–∏—É–º": 0.30,
    "–†–µ–¥–∫–æ—Å—Ç–Ω–æ–µ": 0.45,
}

# File to store user data
DATA_FILE = "user_data.json"

# Functions to load and save data
def load_data():
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r") as file:
                return json.load(file)
        except (FileNotFoundError, json.JSONDecodeError):
            # If the file is not found or the JSON is broken, return a default structure
            return {}
    return {}

def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f)

def get_user(user_id):
    """Retrieve user data from MongoDB or create a new user if not found."""
    user = users_collection.find_one({"user_id": user_id})
    if not user:
        user = {
            "user_id": user_id,
            "coins": 450,
            "eggs": {},
            "pets": [],
            "last_daily": None,
            "streak": 0
        }
        users_collection.insert_one(user)
    return user

def save_user(user):
    """Save or update user data in MongoDB."""
    users_collection.update_one(
        {"user_id": user["user_id"]},
        {"$set": user},
        upsert=True
    )

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)

    pets = user.get("pets", [])
    pet_summary = ", ".join([p["name"] for p in pets]) or "–Ω–µ—Ç"

    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å\n"
        f"üí∞ –ú–æ–Ω–µ—Ç—ã: {user['coins']}\n"
        f"ü•ö –Ø–π—Ü–∞: {len(user['eggs'])}\n"
        f"üôà –ü–∏—Ç–æ–º—Ü—ã: {len(pets)}\n"
        f"üî• –°—Ç—Ä–∏–∫: {user.get('streak', 0)} –¥–Ω"
    )
    await update.message.reply_text(text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "<b>–ö–æ–º–º–∞–Ω–¥—ã –ü–µ—Ç—Ä–æ–ø–æ–ª–∏—Å–∞:</b>\n\n"
        "ü•ö <b>–Ø–π—Ü–∞ & –ü–∏—Ç–æ–º—Ü—ã</b>\n"
        "/buy_egg - –ö—É–ø–∏—Ç—å —è–π—Ü–æ\n"
        "/hatch - –í—Å–∫—Ä—ã—Ç—å –∫—É–ø–ª–µ–Ω–Ω–æ–µ —è–π—Ü–æ\n"
        "/pets - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–∏—Ç–æ–º—Ü–µ–≤\n\n"
        "üí∞ <b>–≠–∫–æ–Ω–æ–º–∏–∫–∞</b>\n"
        "/collect - –°–æ–±—Ä–∞—Ç—å –¥–æ—Ö–æ–¥ —Å –ø–∏—Ç–æ–º—Ü–µ–≤\n"
        "/daily - –ü–æ–ª—É—á–∏—Ç—å –¥–Ω–µ–≤–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ\n"
        "/profile - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/balance - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å\n\n"
        "üîÑ <b>–ü—Ä–æ–≥—Ä–µ—Å—Å</b>\n"
        "/merge <—Ü–∏—Ñ—Ä–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞> <—Ü–∏—Ñ—Ä–∞ –≤—Ç–æ—Ä–æ–≥–æ> - –°–∫—Ä–µ—Å—Ç–∏—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤ –≤–æ–µ–¥–∏–Ω–æ\n"
        "/train <—Ü–∏—Ñ—Ä–∞ –ø–∏—Ç–æ–º—Ü–∞ –ø–æ —Å—á–µ—Ç—É> <–∫–∞—á–µ—Å—Ç–≤–æ> - –¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–æ–º—Ü–∞\n\n"
        "ü§ù <b>–¢—Ä—ç–π–¥–∏–Ω–≥</b>\n"
        "/myid - –£–∑–Ω–∞—Ç—å —Å–≤–æ—ë ID\n"
        "/trade <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> - –û–±–º–µ–Ω –ø–∏—Ç–æ–º—Ü–∞–º–∏\n\n"
        "‚öîÔ∏è <b>–ë–æ–π - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n"
        "/battle <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> - –°—Ä–∞–∂–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏\n"
        "/leaderboard - –õ–∏–¥–µ—Ä—ã"
    )
    await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)

# User init
def initialize_user(user_id):
    return {
        "coins": 450,
        "pets": [],
        "last_claim": None,
        "streak": 0,
        "last_daily": None,
    }

# Pet generation
def determine_rarity(rarity_boost=0):
    roll = random.random() - rarity_boost
    if roll < RARITY_CHANCES["–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π"]:
        return "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π"
    elif roll < sum(RARITY_CHANCES[r] for r in ["–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π"]):
        return "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π"
    elif roll < sum(RARITY_CHANCES[r] for r in ["–≠–ø–∏—á–µ—Å–∫–∏–π", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π"]):
        return "–≠–ø–∏—á–µ—Å–∫–∏–π"
    elif roll < sum(RARITY_CHANCES[r] for r in ["–†–µ–¥–∫–æ—Å—Ç–Ω—ã–π", "–≠–ø–∏—á–µ—Å–∫–∏–π", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π"]):
        return "–†–µ–¥–∫–æ—Å—Ç–Ω—ã–π"
    elif roll < sum(RARITY_CHANCES[r] for r in ["–ù–µ–æ–±—ã—á–Ω—ã–π", "–†–µ–¥–∫–æ—Å—Ç–Ω—ã–π", "–≠–ø–∏—á–µ—Å–∫–∏–π", "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π"]):
        return "–ù–µ–æ–±—ã—á–Ω—ã–π"
    return "–û–±—ã—á–Ω—ã–π"

def generate_random_pet(pet_type=None, rarity_boost=0):
    if pet_type is None:
        pet_type = random.choice(PET_TYPES)
    rarity = determine_rarity(rarity_boost)
    multiplier = RARITY_MULTIPLIERS[rarity]
    base_stats = random.randint(5, 12) * multiplier
    return {
        "id": random.randint(10000, 99999),
        "name": f"{rarity} {pet_type}",
        "type": pet_type,
        "rarity": rarity,
        "level": 1,
        "xp": 0,
        "xp_needed": 100,
        "stats": {
            "attack": base_stats + random.randint(-1, 5),
            "defense": base_stats + random.randint(1, 5),
            "health": base_stats * 2 + random.randint(5, 7),
            "speed": base_stats + random.randint(1, 8),
        },
        "coin_rate": 20 + (RARITY_MULTIPLIERS[rarity] // 2),
        "last_collected": None,
    }

# Bot commands
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)

    await update.message.reply_text(f"üëã –ü—Ä–∏–≤–µ—Ç! –£ —Ç–µ–±—è {user['coins']} –º–æ–Ω–µ—Ç. –ù–∞–ø–∏—à–∏ /help –¥–ª—è –±–æ–ª—å—à–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏!")

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)
    await update.message.reply_text(f"üí∏ –£ —Ç–µ–±—è {user['coins']} –º–æ–Ω–µ—Ç.")

async def buy_egg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(f"ü•ö –ë–∞–∑–æ–≤–æ–µ - {EGG_PRICES['–ë–∞–∑–æ–≤–æ–µ']} –º–æ–Ω–µ—Ç", callback_data="buy_–ë–∞–∑–æ–≤–æ–µ"),
         InlineKeyboardButton(f"üí† –ü—Ä–µ–º–∏—É–º - {EGG_PRICES['–ü—Ä–µ–º–∏—É–º']} –º–æ–Ω–µ—Ç", callback_data="buy_–ü—Ä–µ–º–∏—É–º")],
        [InlineKeyboardButton(f"üåü –†–µ–¥–∫–æ—Å—Ç–Ω–æ–µ - {EGG_PRICES['–†–µ–¥–∫–æ—Å—Ç–Ω–æ–µ']} –º–æ–Ω–µ—Ç", callback_data="buy_–†–µ–¥–∫–æ—Å—Ç–Ω–æ–µ")],
    ]
    await update.message.reply_text("üé∞ –í—ã–±–µ—Ä–∏ —è–π—Ü–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:", reply_markup=InlineKeyboardMarkup(keyboard))

async def buy_egg_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    egg_type = query.data.split("_")[1]
    user = get_user(user_id)

    if user["coins"] < EGG_PRICES[egg_type]:
        await query.edit_message_text(f"üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —è–π—Ü–∞ —Ç–∏–ø–∞ {egg_type}.")
        return

    if "eggs" not in user:
        user["eggs"] = {}
    if egg_type not in user["eggs"]:
        user["eggs"][egg_type] = 0

    user["eggs"][egg_type] += 1
    user["coins"] -= EGG_PRICES[egg_type]
    save_user(user)

    await query.edit_message_text(f"üê£ –í—ã –∫—É–ø–∏–ª–∏ {egg_type} —è–π—Ü–æ –∑–∞ {EGG_PRICES[egg_type]} –º–æ–Ω–µ—Ç!")

async def hatch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Display available eggs to hatch"""
    user_id = update.effective_user.id
    user = get_user(user_id)

    if "eggs" not in user or not user["eggs"]:
        await update.message.reply_text("ü•ö –£ —Ç–µ–±—è –Ω–µ—Ç —è–∏—Ü –¥–ª—è –≤—Å–∫—Ä—ã—Ç–∏—è. –ö—É–ø–∏ –∏—Ö —á–µ—Ä–µ–∑ /buy_egg!")
        return

    keyboard = []
    for egg_type, count in user["eggs"].items():
        if count > 0:
            keyboard.append([InlineKeyboardButton(f"{egg_type} —è–π—Ü–æ ({count})", callback_data=f"hatch_{egg_type}")])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("ü•ö –í—ã–±–µ—Ä–∏ —è–π—Ü–æ –¥–ª—è –≤—Å–∫—Ä—ã—Ç–∏—è:", reply_markup=reply_markup)

async def hatch_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process egg hatching"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    egg_type = query.data.split("_")[1]
    user = get_user(user_id)

    if egg_type not in user["eggs"] or user["eggs"][egg_type] <= 0:
        await query.edit_message_text(f"üòî –£ —Ç–µ–±—è –Ω–µ—Ç —è–∏—Ü —Ç–∏–ø–∞ *{egg_type}* –¥–ª—è –≤—Å–∫—Ä—ã—Ç–∏—è.")
        return

    pet = generate_random_pet(rarity_boost=EGG_RARITY_BOOSTS[egg_type])
    user["eggs"][egg_type] -= 1

    if "pets" not in user:
        user["pets"] = []

    user["pets"].append(pet)
    save_user(user)

    await query.edit_message_text(
        f"ü•ö –ò–∑ {egg_type} —è–π—Ü–∞ –≤—ã–ª—É–ø–∏–ª—Å—è {pet['rarity']} {pet['type']} –ø–∏—Ç–æ–º–µ—Ü!\n\n"
        f"üÜî ID: {pet['id']}\n"
        f"‚öîÔ∏è –ê—Ç–∞–∫–∞: {pet['stats']['attack']}\n"
        f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞: {pet['stats']['defense']}\n"
        f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {pet['stats']['health']}\n"
        f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {pet['stats']['speed']}\n\n"
        f"–≠—Ç–æ—Ç –ø–∏—Ç–æ–º–µ—Ü –ø—Ä–∏–Ω–æ—Å–∏—Ç {pet['coin_rate']} –º–æ–Ω–µ—Ç/—á–∞—Å."
    )

async def pets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Display user's pets"""
    user_id = update.effective_user.id
    user = get_user(user_id)

    if not user.get("pets"):
        await update.message.reply_text("üòâ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤. –ö—É–ø–∏ –∏ –≤—Å–∫—Ä–æ–π —è–π—Ü–æ —Å–Ω–∞—á–∞–ª–∞!")
        return

    pet_list = ""
    for i, pet in enumerate(user["pets"], 1):
        pet_list += (
            f"{i}. {pet['name']} (ID: {pet['id']}) - –£—Ä–æ–≤–µ–Ω—å {pet['level']}\n"
            f"   ‚öîÔ∏è {pet['stats']['attack']} | üõ°Ô∏è {pet['stats']['defense']} | "
            f"‚ù§Ô∏è {pet['stats']['health']} | ‚ö° {pet['stats']['speed']}\n"
            f"   –ü—Ä–∏–Ω–æ—Å–∏—Ç {pet['coin_rate']} –º–æ–Ω–µ—Ç/—á\n\n"
        )

    await update.message.reply_text(f"üôà –¢–≤–æ–∏ –ø–∏—Ç–æ–º—Ü—ã:\n\n{pet_list}")

async def daily(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Claim daily reward"""
    user_id = update.effective_user.id
    user = get_user(user_id)

    current_time = time.time()
    last_daily = user.get("last_daily", 0)

    # Check if 20 hours have passed since last claim
    if last_daily and current_time - last_daily < 20 * 3600:
        hours_left = int((20 * 3600 - (current_time - last_daily)) / 3600) + 1
        await update.message.reply_text(f"üï∞ –¢—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {hours_left} —á.")
        return

    # Calculate streak
    streak = user.get("streak", 0)
    if last_daily and current_time - last_daily < 48 * 3600:  # If claimed within last 48 hours, continue streak
        streak += 1
    else:
        streak = 1  # Reset streak

    user["streak"] = streak
    user["last_daily"] = current_time

    # Calculate reward based on streak
    base_reward = 120
    streak_bonus = min(streak * 10, 3000)  # Cap streak bonus at 100
    total_reward = base_reward + streak_bonus

    user["coins"] += total_reward
    save_user(user)

    await update.message.reply_text(
        f"üéÅ –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! +{total_reward} –º–æ–Ω–µ—Ç\n"
        f"üî• –¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {streak} –¥–Ω (+{streak_bonus} –±–æ–Ω—É—Å)\n"
        f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å {user['coins']} –º–æ–Ω–µ—Ç."
    )

async def collect(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Collect coins from pets"""
    user_id = update.effective_user.id
    user = get_user(user_id)

    if not user.get("pets"):
        await update.message.reply_text("üò∂ –£ —Ç–µ–±—è –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–¥–∞—é—Ç –¥–∞–Ω—å.")
        return

    current_time = time.time()
    total_coins = 0

    for pet in user["pets"]:
        last_collected = pet.get("last_collected", 0)
        if last_collected is None:
            last_collected = 0

        # Calculate hours since last collection (max 24 hours to prevent massive accumulation)
        hours_passed = min(24, (current_time - last_collected) / 3600) if last_collected > 0 else 1

        if hours_passed >= 1:
            coins_earned = int(pet["coin_rate"] * hours_passed)
            total_coins += coins_earned
            pet["last_collected"] = current_time

    if total_coins > 0:
        user["coins"] += total_coins
        save_user(user)
        await update.message.reply_text(f"üê∂ –¢—ã —Å–æ–±—Ä–∞–ª {total_coins} –º–æ–Ω–µ—Ç —Å–æ —Å–≤–æ–∏—Ö –ø–∏—Ç–æ–º—Ü–µ–≤! –¢–≤–æ–π –±–∞–ª–∞–Ω—Å {user['coins']} –º–æ–Ω–µ—Ç.")
    else:
        await update.message.reply_text("üòÅ –ù–µ —Å–ø–µ—à–∏ - –¥–µ–Ω–µ–≥ –Ω–µ—Ç, –Ω–æ —Ç—ã –¥–µ—Ä–∂–∏—Å—å.")

async def merge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Merge pets to increase level"""
    user_id = update.effective_user.id
    user = get_user(user_id)

    if not user.get("pets") or len(user["pets"]) < 2:
        await update.message.reply_text("‚ùó –¢–µ–±–µ –Ω—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –ø–∏—Ç–æ–º—Ü–∞, —á—Ç–æ–±—ã —Å–∫—Ä–µ—Å—Ç–∏—Ç—å –∏—Ö.")
        return

    # Display user's pets for merging
    pet_list = ""
    for i, pet in enumerate(user["pets"], 1):
        pet_list += f"{i}. {pet['name']} (ID: {pet['id']}) - Level {pet['level']}\n"

    await update.message.reply_text(
        f"‚ûï –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–∫—Ä–µ—Å—Ç–∏—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤, —É–∫–∞–∂–∏ –∫–∞–∫–∏—Ö –∏–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—è: /merge 1 2\n\n"
        f"üêµ –¢–≤–æ–∏ –ø–∏—Ç–æ–º—Ü—ã:\n{pet_list}"
    )

async def merge_pets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process pet merging"""
    user_id = update.effective_user.id
    user = get_user(user_id)

    if not context.args or len(context.args) != 2:
        application.pending_merges[user_id] = True
        user_states[user_id] = "merge"
        await update.message.reply_text("‚ùó –£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–≤—É—Ö –ø–∏—Ç–æ–º—Ü–µ–≤, —Ç–æ –µ—Å—Ç—å: /merge 1 2")
        return

    try:
        # Convert to zero-based indices
        pet1_idx = int(context.args[0]) - 1
        pet2_idx = int(context.args[1]) - 1

        if pet1_idx == pet2_idx:
            await update.message.reply_text("üò° –¢—ã –Ω–µ –º–æ–∂–µ—à—å —Å–∫—Ä–µ—Å—Ç–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞ —Å –∏–º –∂–µ —Å–∞–º–∏–º!")
            return

        pets = user["pets"]

        if pet1_idx < 0 or pet1_idx >= len(pets) or pet2_idx < 0 or pet2_idx >= len(pets):
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ –ø–∏—Ç–æ–º—Ü–∞.")
            return

        pet1 = pets[pet1_idx]
        pet2 = pets[pet2_idx]

        merge_cost = 140 + 20 * (pet1["level"] + pet2["level"])  # Merging is more expensive with higher level pets

        if user["coins"] < merge_cost:
            update.message.reply_text(f"üòü –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è —Å–∫—Ä–µ—â–∏–≤–∞–Ω–∏—è. –¢–µ–±–µ –Ω–∞–¥–æ {merge_cost} –º–æ–Ω–µ—Ç.")
            return

        # Check if pets are of the same type
        if pet1["type"] != pet2["type"]:
            await update.message.reply_text("‚Äº –¢—ã –º–æ–∂–µ—à—å —Å–∫—Ä–µ—Å—Ç–∏—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤ –¢–û–õ–¨–ö–û –æ–¥–Ω–æ–≥–æ –≤–∏–¥–∞.")
            return

        # Create the merged pet
        merged_pet = merge_pet_stats(pet1, pet2)

        # Remove the old pets
        if pet1_idx > pet2_idx:
            pets.pop(pet1_idx)
            pets.pop(pet2_idx)
        else:
            pets.pop(pet2_idx)
            pets.pop(pet1_idx)

        # Add the new merged pet
        pets.append(merged_pet)
        save_user(user)

        await update.message.reply_text(
            f"üòé –£—Å–ø–µ—à–Ω–æ —Å–∫—Ä–µ—â–µ–Ω–æ –ø–∏—Ç–æ–º—Ü–∞ –≤ {merged_pet['name']}!\n\n"
            f"‚è´ –£—Ä–æ–≤–µ–Ω—å: {merged_pet['level']}\n"
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ‚öîÔ∏è {merged_pet['stats']['attack']} | üõ°Ô∏è {merged_pet['stats']['defense']} | "
            f"‚ù§Ô∏è {merged_pet['stats']['health']} | ‚ö° {merged_pet['stats']['speed']}\n"
            f"üòã –ú–æ–Ω–µ—Ç –ø—Ä–∏–Ω–æ—Å–∏—Ç: {merged_pet['coin_rate']} –º–æ–Ω–µ—Ç/—á"
        )

        application.pending_merges.pop(user_id, None)
        user_states.pop(user_id, None)

    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏ –¥–µ–π–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–∏—Ç–æ–º—Ü–∞.")

def merge_pet_stats(pet1, pet2):
    """Merge two pets' stats and potentially increase rarity"""
    # Determine which pet has higher level/rarity for base
    rarities_order = {r: i for i, r in enumerate(RARITIES)}

    # Use the higher level pet as the base
    base_pet = pet1 if pet1["level"] >= pet2["level"] else pet2
    other_pet = pet2 if base_pet == pet1 else pet1

    # Create a new pet based on the higher level one
    merged_pet = base_pet.copy()
    merged_pet["id"] = random.randint(10000, 99999)  # New ID

    # Increase level
    merged_pet["level"] = base_pet["level"] + 1

    # Merge stats (base + 50% of other pet's stats)
    for stat in ["attack", "defense", "health", "speed"]:
        bonus = other_pet["stats"][stat] * 0.5
        merged_pet["stats"][stat] = int(base_pet["stats"][stat] + bonus)

    # Chance to increase rarity based on combined levels
    combined_level = pet1["level"] + pet2["level"]
    rarity_chance = min(0.30 * combined_level, 0.60)  # Max 50% chance

    current_rarity_idx = rarities_order[base_pet["rarity"]]
    if current_rarity_idx < len(RARITIES) - 1 and random.random() < rarity_chance:
        new_rarity = RARITIES[current_rarity_idx + 1]
        merged_pet["rarity"] = new_rarity

        # Bonus stats from rarity increase
        rarity_mult = RARITY_MULTIPLIERS[new_rarity] / RARITY_MULTIPLIERS[base_pet["rarity"]]
        for stat in merged_pet["stats"]:
            merged_pet["stats"][stat] = int(merged_pet["stats"][stat] * rarity_mult)

    # Update name and coin rate
    merged_pet["name"] = f"{merged_pet['rarity']} {merged_pet['type']}"
    merged_pet["coin_rate"] = 1 + (RARITY_MULTIPLIERS[merged_pet["rarity"]] // 2)

    # Reset collection time
    merged_pet["last_collected"] = None

    return merged_pet

async def train_pet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Process pet training"""
    user_id = update.effective_user.id
    user = get_user(user_id)

    # Ensure the command has the correct number of arguments
    if not context.args or len(context.args) != 2:
        user_states[user_id] = "train"
        await update.message.reply_text("‚Äº –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –ø–∏—Ç–æ–º—Ü–∞ –∏ —á—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–∫–∞—á–∞—Ç—å, —Ç–æ –µ—Å—Ç—å: /train_pet 1 attack")
        return

    try:
        # Convert to zero-based index
        pet_idx = int(context.args[0]) - 1
        stat = context.args[1].lower()

        # Check if the stat is valid
        if stat not in ["attack", "defense", "health", "speed"]:
            await update.message.reply_text("üòÆ –û —á–µ–º —Ç—ã?. –í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑: attack, defense, health, speed.")
            return

        training_cost = 80 + 10 * user["pets"][pet_idx]["level"]  # Scaling cost based on pet level

        if user["coins"] < training_cost:
            await update.message.reply_text(f"‚ö† –¢–µ–±–µ –Ω–∞–¥–æ {training_cost} –º–æ–Ω–µ—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è!")
            return

        pets = user["pets"]

        # Check if the pet index is valid
        if pet_idx < 0 or pet_idx >= len(pets):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ –ø–∏—Ç–æ–º—Ü–∞.")
            return

        pet = pets[pet_idx]

        # Increase the stat
        increase = 1 + (RARITY_MULTIPLIERS[pet["rarity"]] // 2)
        old_value = pet["stats"][stat]

        if stat == "health":
            pet["stats"][stat] += increase * 2  # Health increases more
        else:
            pet["stats"][stat] += increase

        # Deduct coins for the training
        user["coins"] -= training_cost
        save_user(user)

        # Send feedback to the user
        await update.message.reply_text(
            f"üéâ –õ–≤–ª {pet['name']} {stat} –ø–æ–¥–Ω—è—Ç!\n"
            f"{stat.capitalize()}: {old_value} ‚Üí {pet['stats'][stat]} (+{pet['stats'][stat] - old_value})\n"
            f"üí≤ –¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å {user['coins']} –º–æ–Ω–µ—Ç."
        )

        user_states.pop(user_id, None)

    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

async def trade_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏: /trade <user_id>")
        return

    partner_id = context.args[0]
    user_id = str(update.effective_user.id)

    if user_id == partner_id:
        await update.message.reply_text("–¢—ã –Ω–µ –º–æ–∂–µ—à—å —Ç–æ—Ä–≥–æ–≤–∞—Ç—å —Å–∞–º —Å —Å–æ–±–æ–π.")
        return

    partner = get_user(partner_id)
    if not partner:
        await update.message.reply_text("–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_pets = get_user(user_id).get("pets", [])
    if not user_pets:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞.")
        return

    # –í—ã–±–æ—Ä –ø–∏—Ç–æ–º—Ü–∞
    keyboard = []
    for i, pet in enumerate(user_pets):
        keyboard.append([
            InlineKeyboardButton(f"{pet['name']} ({pet['rarity']})", callback_data=f"offer_{partner_id}_{i}")
        ])

    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏ –ø–∏—Ç–æ–º—Ü–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å @{partner_id}:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def offer_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    _, partner_id, pet_index = query.data.split("_")
    pet_index = int(pet_index)

    user_data = get_user(user_id)
    if pet_index >= len(user_data.get("pets", [])):
        await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –ø–∏—Ç–æ–º—Ü–∞.")
        return

    active_trades[user_id] = {
        "partner": partner_id,
        "offer": pet_index,
        "status": "waiting"
    }

    await query.edit_message_text("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞.")

    # –£–≤–µ–¥–æ–º–∏–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    partner_data = get_user(partner_id)
    offered_pet = user_data["pets"][pet_index]
    await context.bot.send_message(
        chat_id=int(partner_id),
        text=f"–¢–µ–±–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –æ–±–º–µ–Ω: {offered_pet['name']} ({offered_pet['rarity']}). –•–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞?\n–ù–∞–ø–∏—à–∏ /respond {user_id}"
    )

async def respond_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏: /respond <user_id>")
        return

    proposer_id = context.args[0]
    user_id = str(update.effective_user.id)

    if proposer_id not in active_trades:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –í—ã–±–æ—Ä –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞
    user_pets = get_user(user_id).get("pets", [])
    if not user_pets:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞.")
        return

    keyboard = []
    for i, pet in enumerate(user_pets):
        keyboard.append([
            InlineKeyboardButton(f"{pet['name']} ({pet['rarity']})", callback_data=f"respond_{proposer_id}_{i}")
        ])

    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏, –∫–∞–∫–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞ —Ç—ã –æ—Ç–¥–∞—à—å –≤ –æ–±–º–µ–Ω:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def respond_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    _, proposer_id, pet_index = query.data.split("_")
    pet_index = int(pet_index)

    if proposer_id not in active_trades:
        await query.edit_message_text("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ.")
        return

    # –î–∞–Ω–Ω—ã–µ –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω
    proposer_data = get_user(proposer_id)
    responder_data = get_user(user_id)
    trade = active_trades[proposer_id]

    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if trade["partner"] != user_id:
        await query.edit_message_text("–≠—Ç–æ –Ω–µ —Ç–≤–æ–π —Ç—Ä–µ–π–¥.")
        return

    # –û–±–º–µ–Ω
    proposer_pet = proposer_data["pets"].pop(trade["offer"])
    responder_pet = responder_data["pets"].pop(pet_index)

    proposer_data["pets"].append(responder_pet)
    responder_data["pets"].append(proposer_pet)

    save_user(proposer_data)
    save_user(responder_data)
    del active_trades[proposer_id]

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await query.edit_message_text("üéâ –û–±–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω! –ü–∏—Ç–æ–º—Ü—ã –ø–æ–º–µ–Ω—è–ª–∏—Å—å.")
    await context.bot.send_message(chat_id=int(proposer_id), text="üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è! –ü–∏—Ç–æ–º—Ü—ã –æ–±–º–µ–Ω—è–Ω—ã.")

async def myid_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await update.message.reply_text(f"–¢–≤—ñ–π Telegram ID: `{user_id}`", parse_mode=ParseMode.MARKDOWN)

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)

    user_states.pop(user_id, None)
    active_trades.pop(user_id, None)

    if hasattr(context.application, "pending_merges"):
        context.application.pending_merges.pop(user_id, None)

    await update.message.reply_text("‚ö† –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.")

async def fallback_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    state = user_states.get(user_id)

    if not state:
        return

    if state == "merge":
        await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–≤—É—Ö –ø–∏—Ç–æ–º—Ü–µ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: /merge 1 2 –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel")
    elif state == "train":
        await update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∏—Ç–æ–º—Ü–∞ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç –ø—Ä–æ–∫–∞—á–∫–∏: /train 1 attack –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /cancel")
    else:
        await update.message.reply_text("ü§ê –Ø –Ω–µ –ø–æ–Ω—è–ª. –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /help.")

# Main launcher
if __name__ == '__main__':
    application = ApplicationBuilder().token(TOKEN).build()
    application.pending_merges = {}
    keep_alive()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("buy_egg", buy_egg))
    application.add_handler(CommandHandler("hatch", hatch))
    application.add_handler(CommandHandler("pets", pets))
    application.add_handler(CommandHandler("daily", daily))
    application.add_handler(CommandHandler("collect", collect))
    application.add_handler(CommandHandler("merge", merge_pets))
    application.add_handler(CommandHandler("train", train_pet))
    application.add_handler(CommandHandler("trade", trade_command))
    application.add_handler(CommandHandler("respond", respond_command))
    application.add_handler(CommandHandler("myid", myid_command))
    application.add_handler(CommandHandler("cancel", cancel_command))
    application.add_handler(CommandHandler("profile", profile))
    
    application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), fallback_message))
    application.add_handler(CallbackQueryHandler(offer_callback, pattern=r"^offer_"))
    application.add_handler(CallbackQueryHandler(respond_callback, pattern=r"^respond_"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, merge_pets))
    application.add_handler(CallbackQueryHandler(hatch_callback, pattern="^hatch_"))
    application.add_handler(CallbackQueryHandler(buy_egg_callback, pattern="^buy_"))

    application.run_polling()
